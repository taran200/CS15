C＃企业级开发技术练习15答题卡

班级：   信管2班   
姓名：   凌胜鹏
学号：   37

*注：排除答案放置在序号下方。* /

（一）
使用系统；
使用System.Threading.Tasks;
命名空间ConsoleApp1
{
    班级计划
    {
        静态Task <decimal> Sale（十进制pric，整数）
        {
            var date =（pric，num）;
            Task <decimal> tk =新Task <decimal>（t =>
            {
                var（p，n）=（（decimal，int））t;
                返回p * n;
            }，日期）；
            tk.Start（）; 返回tk
        }
        静态异步void Calc（十进制价格，整数） 
        {

            十进制r =等待Sale（price，num）;
            Console.WriteLine（$“单价：{price}，数量：{num}，商品金额{r}”））;
        }
        静态void Main（string [] args）
        {
            十进制价格= 20.88m;
            int num = 5;
            Calc（price，num）;
            Console.WriteLine（$“正在计算单价：{price}，数量：{num}的商品金额”）；
        }
    }
}
（二）
使用系统；
使用System.Threading.Tasks;
使用System.Threading;
命名空间ConsoleApp1
{
    班级计划
    {
        静态AsyncLocal <（double，int）> runnum = new AsyncLocal <（double，int）>（）;
        静态Task Calc（） 
        {
            返回Task.Run（（）=>
            {
                runnum.Value =（0.1，3）;
                var a = runnum.Value.Item1;
                var b = runnum.Value.Item2;
                Console.WriteLine（$“ {a}的{b}次方是{Math.Pow（a，b）}”））;
            }）;
        }
        静态异步任务Main（string [] args）
        {
            runnum.Value =（0.2，4）;
            等待Calc（）;
            var a = runnum.Value.Item1;
            var b = runnum.Value.Item2;
            Console.WriteLine（$“ {a}的{b}次方是{Math.Pow（a，b）}”））;
        }
    }
}
（三）
使用系统；
使用System.Reflection;
命名空间ConsoleApp1
{
    公共班学生 
    {
        公共字符串名称；
        公共静态整数
        public Student（）{num ++; }
        公共DateTime出生{ 组; }
        public int age（）{返回DateTime.Now.Year-birth.Year; }
        public static int getCount（）{return num; }
    }
    班级计划
    {
        静态void Main（string [] args）
        {
            foreach（typeof（Student）.GetMembers（）中的MemberInfo成员） 
            {
                Console.Write（$“成员{member.Name}的类型是”））;
                Console.WriteLine（$“ {member.MemberType}”）;
            }
        }
    }
}